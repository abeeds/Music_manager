@page "/Playlists/{Id}"
@using music_manager_starter.Shared

@inject HttpClient Http

@code {
    [Parameter]
    public string Id { get; set; }
    private List<Song> songs;
    private string playlistTitle;
    private List<Playlist> playlists = new();
    private Guid currentSongId;
    private Guid playlistId;
    private bool showPlOptions = false;

    protected override async Task OnInitializedAsync()
    {
        var playlist = await Http.GetFromJsonAsync<Playlist>($"api/playlists/?Id={Id}");
        playlistTitle = playlist.Title;
        playlistId = playlist.Id;
        songs = await Http.GetFromJsonAsync<List<Song>>($"api/playlists/songs/?PlaylistId={Id}");
    }

    private async Task RmSong(Guid songId) {
        var response = await Http.DeleteAsync($"/api/playlists/songs?PlaylistId={playlistId}&SongId={songId}");
        if (response.IsSuccessStatusCode)
        {
            songs.RemoveAll(s => s.Id == songId);
        }
    }

    private async Task ShowPlOptions(Guid SongId)
    {
        currentSongId = SongId;
        showPlOptions = true;
        playlists = await Http.GetFromJsonAsync<List<Playlist>>($"/api/playlists?SongId={SongId}");
    }

    private void HidePlOptions()
    {
        playlists.Clear();
        showPlOptions = false;
    }

    private async Task AddToPlaylist(Guid PlaylistId)
    {
        PlaylistSong plSong = new PlaylistSong
        {
            SongId = currentSongId,
            PlaylistId = PlaylistId
        };
        var response = await Http.PostAsJsonAsync("api/playlists/songs", plSong);

        // this updates the display in the add playlist options
        if (response.IsSuccessStatusCode)
        {
            var playlist = playlists.FirstOrDefault(pl => pl.Id == PlaylistId);
            playlist.InPlaylist = true;
        }
    }

    private async Task RmFromPlaylist(Guid PlaylistId)
    {
        var response = await Http.DeleteAsync($"api/playlists/songs?PlaylistId={PlaylistId}&SongId={currentSongId}");

        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {
            var playlist = playlists.FirstOrDefault(pl => pl.Id == PlaylistId);
            playlist.InPlaylist = false;

            // update this page if the song was removed from this playlist
            if (PlaylistId == playlistId)
                songs = await Http.GetFromJsonAsync<List<Song>>($"api/playlists/songs/?PlaylistId={Id}");
        }
    }
}

<div class="p-0 min-h-screen bg-pattern flex flex-col items-center justify-center">
    <h2 class="text-3xl font-bold text-white mb-8 text-center">@playlistTitle</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-8">
        @if (songs != null && songs.Count > 0)
        {
            @foreach (var song in songs)
            {
                <div class="glass p-6 border border-gray-300 rounded-lg text-white transition-transform transform hover:scale-105 hover:shadow-xl">
                    <a class="cursor-pointer" href="@($"/{song.Id.ToString("D")}")"><h3 class="text-xl font-semibold mb-2">@song.Title</h3></a>
                    <div class="flex space-x-4 items-center">
                        <svg @onclick="@(() => ShowPlOptions(song.Id))"
                             class="svg_option transition-transform transform hover:scale-105 hover:shadow-xl cursor-pointer"
                             xmlns="http://www.w3.org/2000/svg"
                             height="24px"
                             viewBox="0 -960 960 960"
                             width="24px"
                             fill="currentColor"
                        >
                            <path d="M120-320v-80h280v80H120Zm0-160v-80h440v80H120Zm0-160v-80h440v80H120Zm520 480v-160H480v-80h160v-160h80v160h160v80H720v160h-80Z" />
                        </svg>
                        <svg @onclick="@(() => RmSong(song.Id))"
                             class="svg_option transition-transform transform hover:scale-105 hover:shadow-xl cursor-pointer"
                             xmlns="http://www.w3.org/2000/svg"
                             height="24px"
                             viewBox="0 -960 960 960"
                             width="24px"
                             fill="currentColor"
                        >
                            <path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" />
                        </svg>
                    </div>
                    <p class="text-md">Artist: <span class="font-light">@song.Artist</span></p>
                </div>
            }
        }
        else
        {
            <div class="col-span-1 text-center text-gray-400">No songs found.</div>
        }
    </div>

    @if (showPlOptions)
    {
        <div class="plOptions-overlay">
            <div class="plOptions-content glass">
                @if (playlists != null && playlists.Count > 0)
                {
                    @foreach (var playlist in playlists)
                    {
                        <div class="pl">
                            <span class="pl-title">@playlist.Title</span>
                            @if (playlist.InPlaylist == true)
                            {
                                <svg @onclick="@(() => RmFromPlaylist(playlist.Id))"
                                     xmlns="http://www.w3.org/2000/svg"
                                     height="24px"
                                     viewBox="0 -960 960 960"
                                     width="24px"
                                     fill="black"
                                     class="pl-icon cursor-pointer">
                                    <path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q8 0 15 1.5t14 4.5l-74 74H200v560h560v-266l80-80v346q0 33-23.5 56.5T760-120H200Zm261-160L235-506l56-56 170 170 367-367 57 55-424 424Z" />
                                </svg>

                            }
                            else
                            {
                                <svg @onclick="@(() => AddToPlaylist(playlist.Id))"
                                     xmlns="http://www.w3.org/2000/svg"
                                     height="24px"
                                     viewBox="0 -960 960 960"
                                     width="24px"
                                     fill="black"
                                     class="pl-icon cursor-pointer">
                                    <path d="M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h560q33 0 56.5 23.5T840-760v560q0 33-23.5 56.5T760-120H200Zm0-80h560v-560H200v560Z" />
                                </svg>
                            }
                        </div>
                    }
                }
                else
                {
                    <p class="text-gray-400">No playlists found.</p>
                }
                <button class="done glass" @onclick="HidePlOptions">Done</button>
            </div>
        </div>
    }
</div>

<style>
    .bg-pattern {
        background: linear-gradient( rgba(31, 41, 55, 0.7), rgba(31, 41, 55, 0.7) ), url('dalle.webp');
        background-size: cover;
        background-position: center;
        font-family: 'Rajdhani', sans-serif;
    }

 

    .glass {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px); 
        border-radius: 10px; 
        position: relative; 
        overflow: hidden; 
    }

    .glass:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        pointer-events: none; 
    }

    .svg_option {
        color: #959da5;
        margin-right: 0.5rem;
    }

    .svg_option:hover {
        color: white;
    }

    .plOptions-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .plOptions-content {
        padding: 20px;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 20rem;
        flex-direction: column;
        gap: 0.5rem;
    }

    .pl {
        display: flex;
        justify-content: space-between;
        background-color: white;
        color: black;
        padding: 0.5rem;
        width: 80%;
        text-align: left;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

        .pl:hover {
            background-color: #f0f0f0;
        }

    .plt-title {
        text-align: left;
    }

    .done {
        background-color: #181c24;
        color: white;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        width: 80%;
        cursor: pointer;
    }

        .done:hover {
            background-color: #0d1e42;
        }
</style>